# https://ksby.hatenablog.com/entry/2019/08/16/003609
# https://levelup.gitconnected.com/kraft-kafka-cluster-with-docker-e79a97d19f2c
version: '3'

services:
  # zookeeper cluster
  cp-zookeeper1:
    image: confluentinc/cp-zookeeper:latest
    container_name: cp-zookeeper1
    ports:
      - "12181:12181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: cp-zookeeper1:12888:13888;cp-zookeeper2:22888:23888;cp-zookeeper3:32888:33888
  cp-zookeeper2:
    image: confluentinc/cp-zookeeper:latest
    container_name: cp-zookeeper2
    ports:
      - "22181:22181"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: cp-zookeeper1:12888:13888;cp-zookeeper2:22888:23888;cp-zookeeper3:32888:33888
  cp-zookeeper3:
    image: confluentinc/cp-zookeeper:latest
    container_name: cp-zookeeper3
    ports:
      - "32181:32181"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: cp-zookeeper1:12888:13888;cp-zookeeper2:22888:23888;cp-zookeeper3:32888:33888

  # Kafka cluster
  # docker exec -it cp-kafka1 /bin/bash
  # docker exec -it cp-kafka2 /bin/bash
  # docker exec -it cp-kafka3 /bin/bash
  # docker run --rm --name cp-kafkacat --tty --network rust-kafka_default confluentinc/cp-kafkacat:latest kafkacat -b cp-kafka1:9092 -L
  # topic の作成・一覧取得・詳細表示
  # kafka-topics --create --topic Topic1 --bootstrap-server localhost:9092  --partitions 3 --replication-factor 3 --if-not-exists
  # kafka-topics --bootstrap-server localhost:9092 --list
  # kafka-topics --bootstrap-server localhost:9092 --topic Topic1 --describe
  # kafka-console-producer --broker-list localhost:9093 --topic Topic1
  # kafka-console-consumer --bootstrap-server localhost:9094 --topic Topic1
  cp-kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: cp-kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: cp-zookeeper1:12181,cp-zookeeper2:22181,cp-zookeeper3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cp-kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - cp-zookeeper1
      - cp-zookeeper2
      - cp-zookeeper3
  cp-kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: cp-kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: cp-zookeeper1:12181,cp-zookeeper2:22181,cp-zookeeper3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cp-kafka2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - cp-zookeeper1
      - cp-zookeeper2
      - cp-zookeeper3
  cp-kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: cp-kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: cp-zookeeper1:12181,cp-zookeeper2:22181,cp-zookeeper3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cp-kafka3:9094,PLAINTEXT_HOST://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - cp-zookeeper1
      - cp-zookeeper2
      - cp-zookeeper3
  cp-kafka4:
    image: confluentinc/cp-kafka:latest
    container_name: cp-kafka4
    ports:
      - "9095:9095"
      - "29095:29095"
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: cp-zookeeper1:12181,cp-zookeeper2:22181,cp-zookeeper3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cp-kafka4:9095,PLAINTEXT_HOST://localhost:29095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - cp-zookeeper1
      - cp-zookeeper2
      - cp-zookeeper3
  cp-kafka5:
    image: confluentinc/cp-kafka:latest
    container_name: cp-kafka5
    ports:
      - "9096:9096"
      - "29096:29096"
    environment:
      KAFKA_BROKER_ID: 5
      KAFKA_ZOOKEEPER_CONNECT: cp-zookeeper1:12181,cp-zookeeper2:22181,cp-zookeeper3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://cp-kafka5:9096,PLAINTEXT_HOST://localhost:29096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - cp-zookeeper1
      - cp-zookeeper2
      - cp-zookeeper3
  # Schema Registry
  cp-schema-registry1:
    image: confluentinc/cp-schema-registry:latest
    container_name: cp-schema-registry1
    environment:
      SCHEMA_REGISTRY_HOST_NAME: cp-schema-registry1
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "cp-kafka1:9092,cp-kafka2:9093,cp-kafka3:9094,cp-kafka4:9095,cp-kafka5:9096"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: ERROR
    depends_on:
      - cp-kafka1
      - cp-kafka2
      - cp-kafka3
      - cp-kafka4
      - cp-kafka5
    # broker の登録が完了する前にタイムアウトでコンテナが終了してしまう場合があるので restart: always を指定する
    restart: always
  cp-schema-registry2:
    image: confluentinc/cp-schema-registry:latest
    container_name: cp-schema-registry2
    environment:
      SCHEMA_REGISTRY_HOST_NAME: cp-schema-registry2
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "cp-kafka1:9092,cp-kafka2:9093,cp-kafka3:9094,cp-kafka4:9095,cp-kafka5:9096"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: ERROR
    depends_on:
      - cp-schema-registry1
    # broker の登録が完了する前にタイムアウトでコンテナが終了してしまう場合があるので restart: always を指定する
    restart: always
  cp-schema-registry3:
    image: confluentinc/cp-schema-registry:latest
    container_name: cp-schema-registry3
    environment:
      SCHEMA_REGISTRY_HOST_NAME: cp-schema-registry3
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "cp-kafka1:9092,cp-kafka2:9093,cp-kafka3:9094,cp-kafka4:9095,cp-kafka5:9096"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: ERROR
    depends_on:
      - cp-schema-registry1
    # broker の登録が完了する前にタイムアウトでコンテナが終了してしまう場合があるので restart: always を指定する
    restart: always
  # http://localhost:1936/haproxy-cp-schema-registry?stats
  haproxy-cp-schema-registry:
    image: haproxy:latest
    container_name: haproxy-cp-schema-registry
    ports:
      - "1936:1936"
      - "8081:8081"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - ./docker/cp-schema-registry/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - cp-schema-registry1
      - cp-schema-registry2
      - cp-schema-registry3